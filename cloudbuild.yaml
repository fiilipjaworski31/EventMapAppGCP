steps:
# Krok 1: Zbuduj obraz Docker dla back-endu
- name: 'gcr.io/cloud-builders/docker'
  args: ['build', '-t', '${_REGION}-docker.pkg.dev/$PROJECT_ID/cloud-run-source-deploy/map-events-api:$COMMIT_SHA', './backend']
  id: 'Build Backend Image'

# Krok 2: Wypchnij obraz do Google Artifact Registry
- name: 'gcr.io/cloud-builders/docker'
  args: ['push', '${_REGION}-docker.pkg.dev/$PROJECT_ID/cloud-run-source-deploy/map-events-api:$COMMIT_SHA']
  id: 'Push Backend Image'

# Krok 3: Wdróż nową wersję obrazu na Cloud Run
- name: 'gcr.io/google.com/cloudsdktool/google-cloud-cli:slim' # <-- ZMIANA TUTAJ
  args:
    - 'run'
    - 'deploy'
    - 'map-events-api'
    - '--image=${_REGION}-docker.pkg.dev/$PROJECT_ID/cloud-run-source-deploy/map-events-api:$COMMIT_SHA'
    - '--region'
    - '${_REGION}'
    - '--platform'
    - 'managed'
    - '--allow-unauthenticated'
  id: 'Deploy to Cloud Run'

# Krok 4: Zainstaluj zależności i zbuduj aplikację front-endową
- name: 'gcr.io/cloud-builders/npm'
  args: ['install']
  dir: 'frontend'
  id: 'Install Frontend Dependencies'
- name: 'gcr.io/cloud-builders/npm'
  args: ['run', 'build']
  dir: 'frontend'
  id: 'Build Frontend'

# Krok 5: Wdróż front-end na Firebase Hosting
- name: 'gcr.io/google.com/cloudsdktool/google-cloud-cli:slim' # <-- I ZMIANA TUTAJ
  entrypoint: 'bash'
  args:
    - '-c'
    - 'npm install -g firebase-tools && firebase deploy --only hosting --project $PROJECT_ID --non-interactive'
  dir: 'frontend'
  id: 'Deploy to Firebase Hosting'

images:
- '${_REGION}-docker.pkg.dev/$PROJECT_ID/cloud-run-source-deploy/map-events-api:$COMMIT_SHA'

substitutions:
  _REGION: 'europe-central2'

options:
  logging: CLOUD_LOGGING_ONLY